// libstdaudio
// Copyright (c) 2018 - Timur Doumler

#pragma once
#include <__audio_strided_span>
#include <__audio_buffer>

_LIBSTDAUDIO_NAMESPACE_BEGIN

/** A read-only collection view of a ​buffer​ that is crafted such that it iterates
 *  over the channels or frames of the underlying buffer as appropriate.
 *  Note that it is not actually a container because it returns by value rather
 *  than by reference. The type that it returns is itself a collection view into
 *  the underlying buffer, which means that it does not own the data.
 *
 *  buffer_view is not instantiable by the user. The only way to obtain an instance
 *  of a buffer_view is by calling buffer::channels() or buffer::frames().
 */
template <buffer_view_type _Type>
class buffer_view
{
public:
  using value_type = strided_span<sample_type>;
  using index_type = ptrdiff_t;

  buffer_view(const buffer& buf) noexcept
    : _buf(buf){
  }

  index_type size() const noexcept {
    return _Type == buffer_view_type::channels
      ? _buf._num_channels
      : _buf._num_channels == 0 ? 0 : _buf._data.size() / _buf._num_channels;
  }

  bool empty() const noexcept {
    return _buf.empty();
  }

  value_type operator[](index_type index) {
    if constexpr (_Type == buffer_view_type::channels) {
      if (_buf.get_order() == buffer_order::interleaved) {
        const auto stride = _buf._num_channels;
        const auto size = _buf._data.size();
        return {_buf._data.data() + index, size, stride};
      }
      else {
        const auto offset = index * _buf._data.size() / _buf._num_channels;
        const auto size = _buf._data.size() / _buf._num_channels;
        return {_buf._data.data() + offset, size, 1};
      }
    }
    else {
      if (_buf.get_order() == buffer_order::interleaved) {
        const auto offset = index * _buf._num_channels;
        const auto size = _buf._num_channels;
        return {_buf._data.data() + offset, size, 1};
      }
      else {
        const auto stride = _buf._data.size() / _buf._num_channels;
        const auto size = _buf._data.size();
        return {_buf._data.data() + index, size, stride};
      }
    }
  }

  value_type at() {
    // TODO: throw  std::out_of_range, add tests, and also add this to strided_span
    return {};
  }

  class iterator : public std::iterator<random_access_iterator_tag, value_type, index_type, value_type*, value_type&> {
  private:
    using _super = std::iterator<random_access_iterator_tag, value_type>;

  public:
    // TODO: why is this needed?
    using typename _super::iterator_category;
    using typename _super::value_type;
    using typename _super::difference_type;
    using typename _super::pointer;
    using typename _super::reference;

    reference operator*() noexcept {
      return _sspan;
    }

    pointer operator->() noexcept {
      return addressof(_sspan);
    }

    // TODO: how to implement operator[], considering this is not an iterator into a container?

    iterator& operator++() noexcept {
      _sspan.__add_offset(_offset_step);
      return *this;
    }

    // TODO: why does clang-tidy give a warning here?
    iterator operator++(int) noexcept {
      auto retval = *this;
      ++(*this);
      return retval;
    }

    iterator& operator--() noexcept {
      _sspan.__add_offset(-_offset_step);
      return *this;
    }

    // TODO: why does clang-tidy give a warning here?
    iterator operator--(int) noexcept {
      auto retval = *this;
      --(*this);
      return retval;
    }

    iterator operator+(difference_type dist) {
      iterator retval = *this;
      retval += dist;
      return retval;
    }

    iterator operator-(difference_type dist) {
      iterator retval = *this;
      retval -= dist;
      return retval;
    }

    iterator& operator+=(difference_type dist) {
      _sspan.__add_offset(dist * _offset_step);
      return *this;
    }

    iterator& operator-=(difference_type dist) {
      _sspan.__add_offset(dist * -_offset_step);
      return *this;
    }

    bool operator==(const iterator& other) const noexcept {
      return _sspan.data() == other._sspan.data()
        && _sspan.size() == other._sspan.size()
        && _sspan.stride() == other._sspan.stride();
    }

    bool operator!=(const iterator& other) const noexcept {
      return !(*this == other);
    }

    bool operator<(const iterator& other) const noexcept {
      return _sspan.data() < other._sspan.data();
    }

    bool operator<=(const iterator& other) const noexcept {
      return (*this == other) || (*this < other);
    }

    bool operator>(const iterator& other) const noexcept {
      return (*this != other) && !(*this < other);
    }

    bool operator>=(const iterator& other) const noexcept {
      return !(*this < other);
    }

  private:
    friend class buffer_view;
    iterator (value_type sspan, index_type offset_step)
      : _sspan(sspan), _offset_step(offset_step) {}

    strided_span<sample_type> _sspan;
    index_type _offset_step = 0;
  };

  iterator begin() {
    return iterator{operator[](0), get_offset_step()};
  }

  iterator end() {
    index_type offset_step = 3;
    return iterator{operator[](size()), get_offset_step()};
  }

private:
  bool interleaved() const noexcept {
    return _buf.get_order() == buffer_order::interleaved;
  }

  // TODO: remove code duplication between this function and buffer_view::operator[] above.
  index_type get_offset_step() const {
    if constexpr (_Type == buffer_view_type::channels)
      return interleaved() ? 1 : _buf._data.size() / _buf._num_channels;
    else
      return interleaved() ? _buf._num_channels : 1;
  }

  const buffer& _buf;
};

/** Convenience type alias for a buffer_view for accessing a buffer by channels. */
using channel_view = buffer_view<buffer_view_type::channels>;

/** Convenience type alias for a buffer_view for accessing a buffer by frames. */
using frame_view = buffer_view<buffer_view_type::frames>;

_LIBSTDAUDIO_NAMESPACE_END