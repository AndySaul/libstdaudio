// libstdaudio
// Copyright (c) 2018 - Timur Doumler

#pragma once
#include <memory>
#include <functional>
#include <string_view>
#include <chrono>
#include <__audio_config>
#include <__audio_buffer_list>

_LIBSTDAUDIO_NAMESPACE_BEGIN

class device;
class device_impl;

/** Exception thrown by a device if it cannot complete a requested operation. */
class device_exception : exception {};
// TODO: does this need to inherit from runtime_error and implement what()?

/** Returns the current default audio input device. */
device get_default_input_device();

/** Returns the current default audio output device. */
device get_default_output_device();

/** A handle to an audio input and/or output device, which communicates
 *  with an audio input and/or output driver.
 */
class device {
public:
  /** Default constructor.
   *  Constructs a null device, i.e. a device with no input and output channels.
   */
  device();

  /** Move constructor. */
  device(device&&) noexcept;

  /** Destructor. */
  ~device();

  /** Returns the name of the device. If the device is a null device, this is
   *  an empty string.
   */
  string_view name() const;

  /** Returns true if the device provides input buffers. */
  bool is_input() const noexcept;

  /** Returns true if the device provides output buffers. */
  bool is_output() const noexcept;

  /** Returns: the ordering of the audio buffers used by this device. */
  buffer_order get_native_order() const noexcept;

  /** Returns:​ The buffer order of the data in the buffers contained in the
   *  ​buffer_list​ passed to the callback, which is accessible via ​buffer::raw().
   */
  double get_sample_rate() const noexcept;
  // TODO: provide a setter and a way to query supported sample rates.

  /** Returns: the size of the buffer in bytes that the device will provide
   *  to the callback.
   */
  size_t get_buffer_size() const noexcept;
  // TODO: shouldn't that be in *frames* instead?
  // TODO: provide a setter and a way to query supported buffer sizes.

  /** Initializes the underlying audio device to begin requesting (output devices)
   *  or generating (input devices) audio data. If ​connect()​ has been called on this
   *  device, the audio device will be driven by a separate thread, which is started
   *  at this point. The thread may be created by the library or by the operating system.
   *  If a thread has been requested but cannot be created, or the device cannot be
   *  started, then a device_exception is thrown.
   */
  void start();

  /** Shuts down the underlying audio device so that it no longer requests output
   *  devices) or generates (input devices) audio data. If a thread was created, it is
   *  joined or detached when this function returns. If ​start()​ has not been called,
   *  then this function has no effect.
   */
  void stop();

  /** Returns true if the device is currently running. */
  bool is_running() const noexcept;

  /** Returns true if the device supports conencting a callback and driving it on
   *  a separate thread.
   */
  bool supports_callback() const noexcept;

  /** Returns true if the device supports direct processing by calling process().
   */
  bool supports_process() const noexcept;

  /** Audio callback type. */
  using callback = function<void(device&, buffer_list&)>;

  /** Attaches a callback to be called on a separate thread when the audio device
   *  is ready to receive one or more buffers of audio data (output devices)
   *  or has generated one or more buffers of audio data (input devices).
   *  If this function is being used, it must be called before calling ​start()​.
   *  If this function is called after ​start()​, or the device is not capable
   *  of driving a thread, a device_exception is thrown.
   */
  void connect(callback);

  /** Waits until the device is ready with at least one buffer of audio data. If the
   *  device is configured to drive a thread (by calling ​connect())​, or the device is
   *  not currently running, then this function returns immediately.
   *  If the device does not support direct processing, a device_exception is thrown.
   */
  void wait() const;

  /** Waits until either the device is ready with at least one buffer of audio data,
   *  or the specific duration has elapsed. If the device is configured to drive a thread
   *  (by calling connect()​), or the device is not currently running, then this function
   *  returns immediately.
   *  If the device does not support direct processing, a device_exception is thrown.
   */
  //template <class Rep, class Period>
  //void wait_for(std::chrono::duration<Rep, Period> rel_time) const;
  // TODO: add. Problem: _impl's methods are virtual, so function templates don't work.

  /** Waits until either the device is ready with at least one buffer of audio data,
   *  or until the absolute timeout has expired. If the device is configured to drive
   *  a thread (by calling connect()​), or the device is not currently running, then
   *  this function returns immediately.
   *  If the device does not support direct processing, a device_exception is thrown.
   */
  //template <class Clock, class Duration>
  //void wait_until(std::chrono::time_point<Clock, Duration> abs_time) const;
  // TODO: add. Problem: _impl's methods are virtual, so function templates don't work.

  /** Checks to see if the device has at least one buffer of audio data available.
   *  If so, it calls the callback with ​*this​ and a b​uffer_list​ referencing all
   *  available buffers. If the device is configured to drive a thread (by calling
   *  ​connect()​), the device is not currently running, or there are no audio buffers
   *  available, then this function returns immediately.
   *  If the device does not support direct processing, a device_exception is thrown.
   */
  void process(callback& cb);

private:
  unique_ptr<device_impl> _impl;

  template <typename Impl, typename... Args>
  friend device _make_device_with_impl(Args&&...);
};

_LIBSTDAUDIO_NAMESPACE_END