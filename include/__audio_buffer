// libstdaudio
// Copyright (c) 2018 - Timur Doumler
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#pragma once
#include <cstddef>
#include <__audio_config>
#include <__audio_strided_span>

_LIBSTDAUDIO_NAMESPACE_BEGIN

enum class buffer_view_type
{
  channels,
  frames
};

template <buffer_view_type _Type>
class buffer_view;

/** Convenience type alias for a buffer_view for accessing a buffer by channels. */
using channel_view = buffer_view<buffer_view_type::channels>;

/** Convenience type alias for a buffer_view for accessing a buffer by frames. */
using frame_view = buffer_view<buffer_view_type::frames>;

/** Represents different methods to order the samples inside a multi-channel
 *  audio buffer.
 */
enum class buffer_order : char {
  /** Samples that belong to the same audio frame are contiguous in memory. */
  interleaved,

  /** Samples that belong to the same audio channel are contiguous in memory. */
  deinterleaved
};

/** An audio buffer, providing a view into a range of multi-channel audio data.
 *  The buffer does not own the data. Therefore, constructing and copying a
 *  buffer does not involve memory allocations.
 */
class buffer {
public:
  using index_type = ptrdiff_t;

  /** Constructs a buffer object holding no audio data. */
  buffer() = default;

  /** Constructs a buffer object from a contiguous range of raw audio data.
   *  \param data The audio data.
   *  \param num_channels The number of channels.
   *  \param ordering The buffer ordering of the buffer.
   *
   *  Expects: data.size() is a multiple of num_channels.
   */
  buffer(span<sample_type> data, index_type num_channels, buffer_order ordering);

  /** Returns a view of the raw audio data. */
  span<sample_type> raw() const noexcept { return _data; }

  /** Returns true if the buffer holds no audio data, false otherwise. */
  bool empty() const noexcept { return _data.empty(); }

  /** Returns the size of the buffer audio data in bytes. */
  index_type size_bytes() const noexcept { return _data.size_bytes(); }

  /** Returns the ordering of the buffer audio data. */
  buffer_order get_order() const noexcept { return _order; }

  /** Returns a view for accessing the buffer by channels. */
  channel_view channels() const noexcept;

  /** Returns a view for accessing the buffer by frames. */
  frame_view frames() const noexcept;

private:
  template <buffer_view_type _Type> friend class buffer_view;
  span<sample_type> _data;
  index_type _num_channels = 0;
  buffer_order _order = buffer_order::interleaved;
};

_LIBSTDAUDIO_NAMESPACE_END